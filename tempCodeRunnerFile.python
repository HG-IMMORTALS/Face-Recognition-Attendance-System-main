def max_common_subsequence_length(S1, S2, K):
    len_s1, len_s2 = len(S1), len(S2)

    # Initialize a 2D list to store the length of the common subsequence
    dp = [[0] * (len_s2 + 1) for _ in range(len_s1 + 1)]

    # Iterate through all possible replacements in S1
    for i in range(1, len_s1 + 1):
        for j in range(1, len_s2 + 1):
            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1] + (S1[i - 1] == S2[j - 1]))

    # Iterate through all possible replacements in S1 and S2
    for i in range(1, len_s1 + 1):
        for k in range(1, len_s2 + 1):
            for j in range(max(1, i - K), min(len_s1, i + K) + 1):
                for l in range(max(1, k - K), min(len_s2, k + K) + 1):
                    dp[i][k] = max(dp[i][k], dp[j - 1][l - 1] + dp[i - j + 1][k - l + 1])

    # Return the maximum length of the common subsequence
    return dp[len_s1][len_s2]

# Input reading
S1 = input().strip()
S2 = input().strip()
K = int(input().strip())

# Output the result
result = max_common_subsequence_length(S1, S2, K)
print(result)
